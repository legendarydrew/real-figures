import { usePage } from '@inertiajs/react';
import { PayPalButtons, PayPalButtonsComponentProps, PayPalScriptProvider, ReactPayPalScriptOptions } from '@paypal/react-paypal-js';
import axios from 'axios';
import React from 'react';

// Generated by ChatGPT, modified by me.
// The ChatGPT solution manually added the PayPal JS SDK script to the page and rendered buttons,
// while I opted to use React components instead.
// https://developer.paypal.com/sdk/js/reference/

interface DonationButtonProps {
    amount?: number;
    currency?: string;
    description?: string; // what the donation is for.
    onSuccess?: () => void;
    onFailure?: () => void;
}

export const PaypalButton: React.FC<DonationButtonProps> = ({ description, amount = 10, currency = 'USD', onSuccess, onFailure }) => {
    // see AppServiceProvider.php.
    const { paypalClientId } = usePage().props;

    const scriptOptions: ReactPayPalScriptOptions = {
        clientId: paypalClientId as string,
        disableFunding: ['credit'],
        enableFunding: ['card', 'venmo'],
    };

    const buttonStyle: PayPalButtonsComponentProps['style'] = {
        shape: 'rect',
        label: 'paypal',
        layout: 'horizontal',
        tagline: false,
    };

    /**
     * Set up a PayPal order (opens the popup window).
     * If successful, the order information is returned.
     */
    const createOrderHandler: PayPalButtonsComponentProps['createOrder'] = async (_, actions) => {
        return actions.order.create({
            intent: 'CAPTURE',
            application_context: {
                shipping_preference: 'NO_SHIPPING',
            },
            purchase_units: [
                {
                    description,
                    amount: {
                        currency_code: currency,
                        value: amount.toFixed(2),
                    },
                },
            ],
        });
    };

    /**
     * Handle the approval for the PayPal payment.
     */
    const approveHandler: PayPalButtonsComponentProps['onApprove'] = async (_, actions) => {
        // The transaction has been approved, but the payment has to be captured before funds can be recieved.
        // For some reason, I had no luck trying to do the capture on the backend.
        const transaction = await actions.order?.capture();

        if (transaction) {
            return axios
                .post('/donation', {
                    transaction_id: transaction.id,
                })
                .then(() => {
                    // Show success message to buyer
                    onSuccess && onSuccess();
                })
                .catch(() => {
                    onFailure && onFailure();
                });
        } else {
            throw 'No order details!';
        }
    };

    return (
        <PayPalScriptProvider options={scriptOptions}>
            <PayPalButtons style={buttonStyle} createOrder={createOrderHandler} onApprove={approveHandler} onError={onFailure} />
        </PayPalScriptProvider>
    );
};
