<?php

// Originally generated by ChatGPT, modified by me.

namespace App\Http\Controllers\API;

use App\Facades\PaypalServiceFacade;
use App\Http\Controllers\Controller;
use App\Http\Requests\DonationRequest;
use App\Mail\DonationConfirmation;
use App\Models\Donation;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Mail;

/**
 * DonationController
 * This endpoint is for recording generous donations.
 *
 * @package App\Http\Controllers\API
 */
class DonationController extends Controller
{

    protected array $request_data;
    protected array $transaction;

    /**
     * Capture the payment for a PayPal order.
     *
     * @param DonationRequest $request
     * @return JsonResponse
     */
    public function store(): JsonResponse
    {
        $this->request_data = self::getRequestData()->all();

        if ($this->verifyTransaction())
        {
            // Success!
            $name                = $this->transaction['payer']['name'];
            $amount              = $this->transaction['purchase_units'][0]['payments']['captures'][0]['amount'];
            $is_anonymous = filter_var($this->request_data['is_anonymous'], FILTER_VALIDATE_BOOLEAN) ?? false;
            $transaction_details = [
                'transaction_id' => $this->transaction['id'],
                'name'         => $is_anonymous ? "Anonymous" : "{$name['given_name']} {$name['surname']}",
                'email'          => $this->transaction['payer']['email_address'],
                'amount'         => $amount['value'],
                'currency'       => $amount['currency_code'],
                'is_anonymous' => $is_anonymous,
                'message'      => $this->request_data['message'] ?? null,
            ];
            // To support refunds later, store capture_id as well â€” available in:
            // transaction.purchase_units[0].payments.captures[0].id

            $this->recordDonation($transaction_details);

            return response()->json(['status' => "Verified!"], 201);
        }
        else
        {
            return response()->json(['error' => 'Transaction is invalid or incomplete.'], 400);
        }
    }

    protected function getRequestData(): Request
    {
        return DonationRequest::createFrom(request());
    }

    protected function verifyTransaction(): bool
    {
        // At this point the order should have COMPLETED status, as capturing happens in the front end.
        $this->transaction = PaypalServiceFacade::verifyOrder($this->request_data['transaction_id']);

        return isset($this->transaction['status']) && $this->transaction['status'] === 'COMPLETED';
    }

    protected function recordDonation(array $transaction_details): void
    {
        $donation = Donation::create($transaction_details);

        // Send a thank-you email if we have an email address.
        if ($transaction_details['email'])
        {
            Mail::to($transaction_details['email'])->send(new DonationConfirmation($donation));
        }
    }
}
