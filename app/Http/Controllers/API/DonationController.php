<?php

// Originally generated by ChatGPT, modified by me.

namespace App\Http\Controllers\API;

use App\Facades\PaypalServiceFacade;
use App\Http\Controllers\Controller;
use App\Http\Requests\DonationRequest;
use App\Mail\DonationConfirmation;
use App\Models\Donation;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Mail;

class DonationController extends Controller
{

    /**
     * Capture the payment for a PayPal order.
     *
     * @param DonationRequest $request
     * @return JsonResponse
     */
    public function store(DonationRequest $request): JsonResponse
    {
        $data = $request->validated();

        // At this point the order should have COMPLETED status, as capturing happens in the front end.
        $transaction = PaypalServiceFacade::verifyOrder($data['transaction_id']);

        if (!isset($transaction['status']) || $transaction['status'] !== 'COMPLETED')
        {
            return response()->json(['error' => 'Transaction is invalid or incomplete.'], 400);
        }

        // Success!
        $name     = $transaction['payer']['name'];
        $amount   = $transaction['purchase_units'][0]['payments']['captures'][0]['amount'];
        $donation = Donation::create([
            'transaction_id' => $transaction['id'],
            'name'     => "{$name['given_name']} {$name['surname']}",
            'amount'   => $amount['value'],
            'currency' => $amount['currency_code'],
            'message'        => $data['message'],
        ]);

        // To support refunds later, store capture_id as well â€” available in:
        // transaction.purchase_units[0].payments.captures[0].id

        // Send a thank-you email if we have an email address.
        if ($email = $transaction['payer']['email_address'])
        {
            Mail::to($email)->send(new DonationConfirmation($donation));
        }

        return response()->json(['status' => "Verified!"], 201);
    }
}
